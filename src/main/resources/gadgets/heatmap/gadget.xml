<Module>
    <ModulePrefs title="Heatmap gadget for Dow Jones"
                 title_url=""
                 directory_title="Heatmap gadget for Dow Jones"
                 description="Heatmap gadget for Dow Jones"
                 author="Dow Jones"
                 author_email=""
                 thumbnail='#staticResourceUrl("com.dowJones.jira.plugins.heatmap:heatmapResources", "thumbnail.png")'
    >
        <Optional feature="gadget-directory">
            <Param name="categories">
                JIRA
            </Param>
        </Optional>
        <Require feature="oauthpopup"/>
        <Optional feature="auth-refresh"/>
        <Require feature="dynamic-height"/>
        <Require feature="setprefs"/>
        <Require feature="settitle"/>
        <Require feature="views"/>
        <Optional feature="atlassian.util"/>
        #oauth
        #supportedLocales("gadget.common,heatmap")
        #supportedLocales
    </ModulePrefs>

    <UserPref name="isConfigured" datatype="hidden" default_value="false"/>
    <UserPref name="refresh" datatype="hidden" default_value="false"/>
    <UserPref name="projects" datatype="hidden" default_value="projects"/>
    <UserPref name="labels" datatype="hidden" default_value="SECURITY"/>
    <UserPref name="cellsNumber" datatype="hidden" default_value="50"/>
    <UserPref name="majorPriorityName" datatype="hidden" default_value="Major"/>
    <UserPref name="highPriorityName" datatype="hidden" default_value="Critical"/>
    <UserPref name="highestPriorityName" datatype="hidden" default_value="Blocker"/>
    <UserPref name="blocker" datatype="hidden" default_value="24"/>
    <UserPref name="critical" datatype="hidden" default_value="48"/>
    <UserPref name="major" datatype="hidden" default_value="96"/>
    <UserPref name="red" datatype="hidden" default_value="10"/>
    <UserPref name="amber" datatype="hidden" default_value="1"/>
    <UserPref name="startDate" datatype="hidden" default_value="2018-07-31"/>
    <UserPref name="projectName" datatype="hidden" default_value=""/>

    <Content type="html">
        <![CDATA[
            #requireResource("com.atlassian.jira.gadgets:autocomplete")
            #requireResource("com.atlassian.jira.gadgets:ajs-gadgets")
            #requireResource("com.dowJones.jira.plugins.heatmap:heatmapResources")
            #requireResource("com.atlassian.auiplugin:aui-date-picker")
            #includeResources()
            <script src="https://code.highcharts.com/highcharts.js"></script>
            <script src="https://code.highcharts.com/modules/treemap.js"></script>
            <script src="https://code.highcharts.com/modules/series-label.js"></script>
            <script src="https://code.highcharts.com/modules/exporting.js"></script>
            <script type="text/javascript">


            AJS.$(document).ready((function() {
                (function ($) {
                var gadget = AJS.Gadget({
                baseUrl: "__ATLASSIAN_BASE_URL__",
                useOauth: "/rest/gadget/1.0/currentUser",
                config: {
                    descriptor: function(args) {
                        var gadget = this;
                        var allProjects = args.allProjects;
                        AJS.$(this).resize(function() {
                            gadgets.window.adjustHeight();
                        });
                        return {
                            theme : function() {

                                //set where settings will be
                            if (gadgets.window.getViewportDimensions().width < 450){
                                return "gdt top-label";
                            } else {
                                return "gdt top-label";
                            }
                            }(),
                            onResizeReload: false,
                                //set settings to be return(create fields on config page)
                            fields: [
                            {
                                type: "custom",
                                template: function(){
                                    return "<div id='issues-filter' class='issues-filter'><strong class='titleText'>Issues filter settings</strong></div>";
                                }
                            },{
                                id: "projects",
                                userpref: "projects",
                                class: "numField",
                                label: "Projects(comma separated list, ex. 'FACTIVA,DMI'):",
                                type: "callbackBuilder",
                                callback: function(parentDiv){
                                AJS.$('div:has(#projects)').addClass('flex-box');
                                AJS.$('.aui.gdt.top-label').addClass('flex-parent');
                                AJS.$('div:has(#issues-filter)').addClass('flex-row');
                                   parentDiv.append(
                                        AJS.$("<input/>").attr({
                                            id: "projects",
                                            type: "text",
                                            class: "text",
                                            name:"projects"
                                        }).val(gadget.getPref("projects"))
                                    );
                                }
                            }, {
                                id: "labels",
                                userpref: "labels",
                                class: "numField",
                                label: "Labels(comma separated list, ex. 'sec-issue,security'):",
                                type: "callbackBuilder",
                                callback: function(parentDiv){

                                    AJS.$('div:has(#labels)').addClass('flex-box');
                                    parentDiv.append(
                                        AJS.$("<input/>").attr({
                                            id: "labels",
                                            type: "text",
                                            class: "text",
                                            name:"labels"
                                        }).val(gadget.getPref("labels"))
                                    );
                                }
                            }, {
                                type: "custom",
                                template: function(){
                                    return "<div id='sla' class='sla'><strong class='titleText'>Triage SLA Settings</strong></div>";
                                }
                            },{
                                id: "highestPriorityName",
                                userpref: "highestPriorityName",
                                class: "numField",
                                label: "Highest priority name:",
                                type: "callbackBuilder",
                                callback: function(parentDiv){
                                    AJS.$('div:has(#sla)').addClass('flex-row');
                                    AJS.$('div:has(#highestPriorityName)').addClass('flex-box');
                                    parentDiv.append(
                                        AJS.$("<input/>").attr({
                                            id: "highestPriorityName",
                                            type: "text",
                                            class: "text",
                                            name:"highestPriorityName"
                                        }).val(gadget.getPref("highestPriorityName"))
                                    );
                                }
                            }, {
                                id: "blocker",
                                userpref: "blocker",
                                class: "numField",
                                label: "Highest expected triage time, h(ex. 24):",
                                type: "callbackBuilder",
                                callback: function(parentDiv){
                                    AJS.$('div:has(#blocker)').addClass('flex-box');
                                    parentDiv.append(
                                        AJS.$("<input/>").attr({
                                            id: "blocker",
                                            type: "text",
                                            class: "text numeric",
                                            name:"blocker"
                                        }).val(gadget.getPref("blocker"))
                                    );
                                }
                            },{
                                id: "highPriorityName",
                                userpref: "highPriorityName",
                                class: "highPriorityName",
                                label: "High priority name:",
                                type: "callbackBuilder",
                                callback: function(parentDiv){
                                    AJS.$('div:has(#highPriorityName)').addClass('flex-box');
                                    parentDiv.append(
                                        AJS.$("<input/>").attr({
                                            id: "highPriorityName",
                                            type: "text",
                                            class: "text",
                                            name:"highPriorityName"
                                        }).val(gadget.getPref("highPriorityName"))
                                    );
                                }
                            },{
                                id: "critical",
                                userpref: "critical",
                                class: "numField",
                                label: "High expected triage time, h(ex. 48):",
                                type: "callbackBuilder",
                                callback: function(parentDiv){
                                    AJS.$('div:has(#critical)').addClass('flex-box');
                                    parentDiv.append(
                                        AJS.$("<input/>").attr({
                                            id: "critical",
                                            type: "text",
                                            class: "text numeric",
                                            name:"critical"
                                        }).val(gadget.getPref("critical"))
                                    );
                                }
                            },{
                                id: "majorPriorityName",
                                userpref: "majorPriorityName",
                                class: "majorPriorityName",
                                label: "Major priority name:",
                                type: "callbackBuilder",
                                callback: function(parentDiv){
                                    AJS.$('div:has(#majorPriorityName)').addClass('flex-box');
                                    parentDiv.append(
                                        AJS.$("<input/>").attr({
                                            id: "majorPriorityName",
                                            type: "text",
                                            class: "text",
                                            name:"majorPriorityName"
                                        }).val(gadget.getPref("majorPriorityName"))
                                    );
                                }
                            },{
                                id: "major",
                                userpref: "major",
                                class: "numField",
                                label: "Major expected triage time, h(ex. 96):",
                                 type: "callbackBuilder",
                                callback: function(parentDiv){
                                    AJS.$('div:has(#major)').addClass('flex-box');
                                    parentDiv.append(
                                        AJS.$("<input/>").attr({
                                            id: "major",
                                            type: "text",
                                            class: "text numeric",
                                            name:"major"
                                        }).val(gadget.getPref("major"))
                                    );
                                }
                            },{
                                type: "custom",
                                template: function(){
                                    return "<div id='thresholds-settings' class='thresholds-settings'><strong class='titleText'>Heatmap Thresholds Settings</strong></div><div id='specialFlexBox' class='specialFlexBox'>";
                                }
                            }, {
                                id: "red",
                                userpref: "red",
                                class: "numField",
                                label: "Health status 'Red' score value:",
                                type: "callbackBuilder",
                                callback: function(parentDiv){
                                    AJS.$('div:has(#red)').addClass('flex-box');
                                    parentDiv.append(
                                        AJS.$("<input/>").attr({
                                            id: "red",
                                            type: "text",
                                            class: "text numeric",
                                            name:"red"
                                        }).val(gadget.getPref("red"))
                                    );
                                }
                            },{
                                id: "amber",
                                userpref: "amber",
                                class: "numField",
                                label: "Health status 'Amber' score value:",
                                type: "callbackBuilder",
                                callback: function(parentDiv){
                                    AJS.$('div:has(#amber)').addClass('flex-box');
                                    parentDiv.append(
                                        AJS.$("<input/>").attr({
                                            id: "amber",
                                            type: "text",
                                            class: "text numeric",
                                            name:"amber"
                                        }).val(gadget.getPref("amber"))
                                    );
                                }
                            }, {
                                type: "custom",
                                template: function(){
                                    return "</div></div><div id='risk-def' class='risk-def'>Risc Score is a wighted value of SLA violation level on a particular project calculated by formula:<br/><br/>Risk Score = (Blockers * 10) + (Criticals * 1) + (Majors / 20) + (sum of SLA violations)<br/><br/>Note: Only issues with SLA violations are counted in Blockers, Criticals and Majors</div>";
                                }
                            },{
                                type: "custom",
                                template: function(){
                                    return "<div id='advanced-settings' class='advanced-settings'><strong class='titleText'>Advanced settings</strong></div>";
                                }
                            },{
                                id: "cellsNumber",
                                userpref: "cellsNumber",
                                class: "numField",
                                label: "Cells per heatmap:",
                                type: "callbackBuilder",
                                callback: function(parentDiv){

                                    AJS.$('div:has(#cellsNumber)').addClass('flex-box');
                                    AJS.$('div:has(select)').addClass('flex-box');
                                    AJS.$('div:has(#advanced-settings)').addClass('flex-row');
                                    parentDiv.append(
                                        AJS.$("<input id='cellsNumber' type='text' class='text numeric' name='cellsNumber'></input>").val(gadget.getPref("cellsNumber"))
                                    );
                                }
                            },
                             AJS.gadget.fields.nowConfigured()
                            ]
                        };
                    }
                },
                <!--end of config-->
                view: {
                    enableReload: true,
                    onResizeReload: true,
                    template: function(args) {
                    var gadget = this;
                    AJS.$('.item-link.no_target:contains("gadget.common.configure")').text('Configuration');
                    AJS.$('.item-link.no_target:contains("gadget.common.reload")').text('Reload');
                    var now = new Date();
                    var formatedDate = now.getFullYear() + "-" + (now.getMonth()+1) + '-' + now.getDate();
                    gadget.getView().html("<div id='container'/><div id='dateConfig'><div class='flex-box'><label for='fromDate'>Show statistic from: </label><input class='aui-date-picker' id='fromDate' type='date'/></div><div id='showTable' class='flex-box'><input type='button' class='aui-button' value='Show description' id='showDescription'/></div></div><table id='issuesDescriptionTable' align='center'></table>");
                    AJS.$('#fromDate').datePicker({'overrideBrowserDefault': true});
                    AJS.$('#fromDate').attr("max", formatedDate);
                    var defaultDate = new Date()
                    defaultDate.setDate(now.getDate()-7);var day = defaultDate.getDate();
                    var month = (defaultDate.getMonth()+1);
                    if(day<10){
                        day='0'+day;
                    }
                    if(month<10){
                        month='0'+month;
                    }
                    var formatedDefaultDate = defaultDate.getFullYear() + "-" + month + '-' + day;
                    gadgets.Prefs().set('startDate', formatedDefaultDate);
                    var records =  args.records;
                    if(records.length===1){
                         gadgets.Prefs().set("projectName", records[0].projectName);
                         redrawToDrilldown();
                    } else{
                        redrawChartToTreemap(args.records);
                    }
                },
                <!--close templates-->
                args:[{
                    key: "records",
                    ajaxOptions: function() {
                        return {
                            url: "/rest/heatmap-dj/1.0/gadget/heatmap/main-chart",
                            data: {
                                projects: gadgets.Prefs().getString("projects"),
                                labels: gadgets.Prefs().getString("labels"),
                                majorPriorityName: gadgets.Prefs().getString("majorPriorityName"),
                                cellsNumber: gadgets.Prefs().getString("cellsNumber"),
                                highPriorityName: gadgets.Prefs().getString("highPriorityName"),
                                highestPriorityName: gadgets.Prefs().getString("highestPriorityName"),
                                blocker: gadgets.Prefs().getString("blocker"),
                                critical: gadgets.Prefs().getString("critical"),
                                major: gadgets.Prefs().getString("major"),
                                red: gadgets.Prefs().getString("red"),
                                amber: gadgets.Prefs().getString("amber")
                            }
                        };
                    }
                }]
                }
                <!--end of view-->
            });
            <!--end of AJS.Gadget-->
        })(jQuery);
        <!--end of function-->
    }));
    <!--end of function in doc.ready-->
            </script>
        ]]>
    </Content>

</Module>