<Module>
    <ModulePrefs title="Heatmap gadget for Dow Jones"
                 title_url=""
                 directory_title="Heatmap gadget for Dow Jones"
                 description="Heatmap gadget for Dow Jones"
                 author="Dow Jones"
                 author_email=""
                 thumbnail='#staticResourceUrl("com.epam.jira.plugins.heatmap:heatmapResources", "thumbnail.png")'
    >
        <Optional feature="gadget-directory">
            <Param name="categories">
                JIRA
            </Param>
        </Optional>
        <Require feature="oauthpopup"/>
        <Optional feature="auth-refresh"/>
        <Require feature="dynamic-height"/>
        <Require feature="setprefs"/>
        <Require feature="settitle"/>
        <Require feature="views"/>
        <Optional feature="atlassian.util"/>
        #oauth
        #supportedLocales("gadget.common,heatmap")
        #supportedLocales
    </ModulePrefs>

    <UserPref name="isConfigured" datatype="hidden" default_value="false"/>
    <UserPref name="refresh" datatype="hidden" default_value="false"/>
    <UserPref name="projects" datatype="hidden" default_value="projects"/>
    <UserPref name="labels" datatype="hidden" default_value="SECURITY"/>
    <UserPref name="cellsNumber" datatype="hidden" default_value="50"/>
    <UserPref name="majorPriorityName" datatype="hidden" default_value="Major"/>
    <UserPref name="highPriorityName" datatype="hidden" default_value="Critical"/>
    <UserPref name="highestPriorityName" datatype="hidden" default_value="Blocker"/>
    <UserPref name="blocker" datatype="hidden" default_value="24"/>
    <UserPref name="critical" datatype="hidden" default_value="48"/>
    <UserPref name="major" datatype="hidden" default_value="96"/>
    <UserPref name="red" datatype="hidden" default_value="10"/>
    <UserPref name="amber" datatype="hidden" default_value="1"/>
    <UserPref name="startDate" datatype="hidden" default_value="2018-07-31"/>
    <UserPref name="projectName" datatype="hidden" default_value=""/>
    <UserPref name="issueType" datatype="hidden" default_value="vulnerability"/>

    <Content type="html">
        <![CDATA[
            #requireResource("com.atlassian.jira.gadgets:autocomplete")
            #requireResource("com.atlassian.jira.gadgets:ajs-gadgets")
            #requireResource("com.epam.jira.plugins.heatmap:heatmapResources")
            #requireResource("com.atlassian.auiplugin:aui-date-picker")
            #includeResources()
            <script src="https://code.highcharts.com/highcharts.js"></script>
            <script src="https://code.highcharts.com/modules/treemap.js"></script>
            <script src="https://code.highcharts.com/modules/series-label.js"></script>
            <script src="https://code.highcharts.com/modules/exporting.js"></script>
            <script type="text/javascript">

            var redColor = '#d04437';
            var standardColor = '#ccc';
            var amberInputSelector = 'input#amber.numeric';
            var projectsSelector = 'input#projects';
            var redInputSelector = 'input#red.numeric';
            var cellsNumberSelector = 'input#cellsNumber.numeric';
            var issuesDescription;
            function calculateFontSize(){
                var minHeight = findMinSquareSizeForDimention('height');
                var minWidth = findMinSquareSizeForDimention('width');
                var minFontSizeForHeight = calculateMinFontSize(minHeight)*1.2;
                var minFontSizeForWidth = calculateMinFontSize(minWidth);
                return Math.min(minFontSizeForHeight, minFontSizeForWidth);
            }

            function calculateMinFontSize(minSize){
                var standardFontSize = 16;
                if(minSize < 20){
                    return standardFontSize-6;
                } else if(minSize < 40){
                    return standardFontSize-5;
                } else if(minSize < 60){
                    return standardFontSize-4;
                } else if(minSize < 80){
                    return standardFontSize-3;
                } else if(minSize < 100){
                    return standardFontSize-2;
                } else if(minSize < 120){
                    return standardFontSize-1;
                } else{
                    return standardFontSize;
                }
            }

            function findMinSquareSizeForDimention(attrName){
                var array = [];
                AJS.$('rect.highcharts-point').each(function(){
	                array.push(AJS.$(this).attr(attrName));
                });
                return Math.min.apply(Math, array);
            };

            AJS.$(document).on("input", ".numeric", function() {
                this.value = this.value.replace(/\D/g,'');
            });


            AJS.$(document).on("keydown", cellsNumberSelector, function(data){
                var errorMessageSelector = '#cellsNumber-error';
                var cellsNumberInput = AJS.$(cellsNumberSelector);
                cellsNumberInput.css('border-color', standardColor)
                hideErrorMessage(errorMessageSelector);
                if(isCorrectSymbol(data)){
                    var correctionValue = AJS.$(projectsSelector).val().split(',').length;
                    var newValue = getNewValue(data);
                    if(parseInt(newValue) < parseInt(correctionValue)){
                        showErrorMessage(errorMessageSelector, 'Incorrect value. "Cells number" field value should be greater than number of selected projects in "Projects" field');
                        cellsNumberInput.css('border-color', redColor);
                        return false;
                    }
                } else if(data.keyCode > 39 && /\w/g.test(data.key)){
                    showErrorMessage(errorMessageSelector, 'Incorrect value. Only numeric values are allowed');
                    cellsNumberInput.css('border-color', redColor);
                    return false;
                }
                return true;
            });

            AJS.$(document).on("keydown", amberInputSelector, function(data) {
                var errorMessageSelector = '#amber-error';
                var amberInput = AJS.$(amberInputSelector);
                amberInput.css('borderColor', standardColor)
                hideErrorMessage(errorMessageSelector);

                if(isCorrectSymbol(data)){
                    var redValue = AJS.$(redInputSelector).val();
                    var newValue = getNewValue(data);
                    if(parseInt(newValue) >  parseInt(redValue)){
                        showErrorMessage(errorMessageSelector, 'Incorrect value. "Amber" score value should be less than "Red" score value');
                        amberInput.css('border-color', redColor);
                        return false;
                    }
                } else if(data.keyCode > 39 && /\w/g.test(data.key)){
                    showErrorMessage(errorMessageSelector, 'Incorrect value.');
                    amberInput.css('border-color', redColor);
                    return false;
                }
                return true;
            });

            AJS.$(document).on("change", "#fromDate", function(data){
                var gadgets = AJS.$(window)[0].gadgets.Prefs();
                gadgets.set('startDate', data.target.value);
                redrawToDrilldown();
            });

            AJS.$(document).on("click", "#showDescription", function(data){
                var table = AJS.$('#issuesDescriptionTable')
                AJS.$('#issuesDescriptionTable').show();
                if(table){
                    table.empty();
                }
                table.append("<tr class='headerRow'><td id='calculatedRateScore'><strong>Contributed rate score:</strong></td>"
                + "<td id='issueKey'><strong>Issue name</strong></td><td id='issueSummary'><strong>Summary<strong></td>"
                + "<td id='issueExpiration'><strong>Expired by</strong></td><td id='assignee'><strong>Assignee</strong></td>"
                + "<td id='issuePriority'><strong>Issue priority</strong></td></tr>");
                issuesDescription.forEach(function(issue){
                    var linkToIssue = AJS.gadget.getBaseUrl() + "/browse/" + issue.issueKey;
                    debugger;
                    table.append("<tr class='bodyRow'><td id='calculatedRateScore'><span class='" + issue.color + "'>" + issue.calculatedRateScore + "</span></td>"
                    + "<td id='issueKey'><a href='"+linkToIssue+"' target='_blank'>" + issue.issueKey + "</a></td><td id='issueSummary'>" + issue.summary + "</td>"
                    + "<td id='issueExpiration'>" + issue.issueExpiration + " days</td><td id='assignee'>" + issue.assignee + "</td>"
                    + "<td id='issuePriority'>" + issue.issuePriority + "</td></tr>");
                });
                AJS.$(window)[0].gadgets.window.adjustHeight();
            });


            AJS.$(document).on("keydown", redInputSelector, function(data) {
                var errorMessageSelector = '#red-error';
                var redInput = AJS.$(redInputSelector);
                redInput.css('borderColor', standardColor)
                hideErrorMessage(errorMessageSelector);
                if(isCorrectSymbol(data)){
                    var amberValue = AJS.$(amberInputSelector).val();
                    var newValue = getNewValue(data);
                    if(parseInt(newValue) <  parseInt(amberValue)){
                        showErrorMessage(errorMessageSelector, 'Incorrect value. "Red" score value should be greater than "Amber" score value');
                        redInput.css('border-color', redColor);
                        return false;
                    }
                } else if(data.keyCode > 39 && /\w/g.test(data.key)){
                    showErrorMessage(errorMessageSelector, 'Incorrect value.');
                    redInput.css('border-color', redColor);
                    return false;
                }
                return true;
            });

            AJS.$(document).on("keydown", 'input#projects', function(data) {
                var errorMessageSelector = '#projects-error';
                var redInput = AJS.$('input#projects');
                redInput.css('borderColor', standardColor)
                hideErrorMessage(errorMessageSelector);
                if( data.keyCode < 40 || /\w/g.test(data.key) || data.key===','){
                    return true;
                }
                showErrorMessage(errorMessageSelector, 'Incorrect value. Possible values are: "A-z", "1-9" and ","]');
                redInput.css('border-color', redColor);
                return false;
            });

            function isNumeric(key){
                return /\d/g.test(key);
            }


            function getNewValue(data){
                var currentValue = data.currentTarget.value.toString();
                if(data.keyCode==8 && data.currentTarget.selectionStart == data.currentTarget.value.toString().length){
                    return parseInt(currentValue.substring(0, data.currentTarget.selectionStart-1))
                }
                return parseInt(currentValue.substring(0, data.currentTarget.selectionStart) + data.key + currentValue.substring(data.currentTarget.selectionEnd))
            }

            function hideErrorMessage(selector){
                var errorMessage = AJS.$(selector);
                errorMessage.css('visibility: hidden; font-size: 8px; color: red');
                errorMessage.text('');
                errorMessage.hide();
                resizeConfigurationForm();
            }

            function resizeConfigurationForm(){
                AJS.$(this)[0].gadgets.window.adjustHeight();
            }

            function showErrorMessage(selector, message){
                var errorMessage = AJS.$(selector);
                errorMessage.text(message);
                errorMessage.show();
                resizeConfigurationForm();

            }

            function isCorrectSymbol(data){
                var keyCode = data.keyCode;
                return isNumeric(data.key) || keyCode == 8 ||  keyCode == 30 || keyCode == 33 || keyCode == 127;
            }

            function redrawToTreeMap(){
                var chart = AJS.$("#container").highcharts();
                if(chart !=  null){
                    chart.destroy();
                }
                var gadgets = AJS.$(this)[0].gadgets;
                AJS.$.ajax({
                    type: 'GET',
                    url: '/rest/heatmap-dj/1.0/gadget/heatmap/main-chart',
                    data:{
                        projects: gadgets.Prefs().getString("projects"),
                        labels: gadgets.Prefs().getString("labels"),
                        majorPriorityName: gadgets.Prefs().getString("majorPriorityName"),
                        cellsNumber: gadgets.Prefs().getString("cellsNumber"),
                        highPriorityName: gadgets.Prefs().getString("highPriorityName"),
                        highestPriorityName: gadgets.Prefs().getString("highestPriorityName"),
                        blocker: gadgets.Prefs().getString("blocker"),
                        critical: gadgets.Prefs().getString("critical"),
                        major: gadgets.Prefs().getString("major"),
                        red: gadgets.Prefs().getString("red"),
                        amber: gadgets.Prefs().getString("amber"),
                        issueType: gadgets.Prefs().getString("issueType")
                    },
                    success: function(data){
                        redrawChartToTreemap(data);
                    }
                });
            }

            function redrawToDrilldown(){

                AJS.$('#dateConfig').datepicker('setDate', gadgets.Prefs().getString('startDate'));
                AJS.$.ajax({
                    type: 'GET',
                    url: '/rest/heatmap-dj/1.0/gadget/heatmap/project-statistic',
                    data:{
                        projects: gadgets.Prefs().getString("projects"),
                        labels: gadgets.Prefs().getString("labels"),
                        majorPriorityName: gadgets.Prefs().getString("majorPriorityName"),
                        cellsNumber: gadgets.Prefs().getString("cellsNumber"),
                        highPriorityName: gadgets.Prefs().getString("highPriorityName"),
                        highestPriorityName: gadgets.Prefs().getString("highestPriorityName"),
                        blocker: gadgets.Prefs().getString("blocker"),
                        critical: gadgets.Prefs().getString("critical"),
                        major: gadgets.Prefs().getString("major"),
                        red: gadgets.Prefs().getString("red"),
                        amber: gadgets.Prefs().getString("amber"),
                        projectName: gadgets.Prefs().getString("projectName"),
                        startDate: gadgets.Prefs().getString("startDate"),
                        issueType: gadgets.Prefs().getString("issueType")
                    },
                    success: function(data){
                        redrawChartToDrilldown(data);
                    }
                });

            }

            function  redrawChartToTreemap(records){
                var seriesData = [];
                records.forEach(function(record){
                    seriesData.push({
                        name: record.projectName,
                        color: record.color,
                        value: record.squareSize,
                        riskScore: record.riskScore,
                        link: record.link,
                        critical: record.critical,
                        blocker: record.blocker,
                        major: record.major
                    });
                });
                AJS.$('#dateConfig').hide();
                AJS.$('#issuesDescriptionTable').hide();
                var treemapOptions = {
                    chart: {
                        type: 'treemap',
                        height: '50%',
                        layoutAlgorithm: 'squarified',
                        alternateStartingDirection: true,
                        zoomType: 'xy',
                        margin: [50, 5, 20, 5]
                    },
                    tooltip: {
                        useHTML: true,
                        pointFormat: '<span style="font-size: 14px"><strong>{point.name}</strong></span><br/>Risk Score: {point.riskScore}<br/>Blocker: {point.blocker}<br/>Critical: {point.critical}<br/>Major: {point.major}'
                    },
                    credits: {
                        enabled: false
                    },
                    plotOptions: {
                        series: {
                            dataLabels: {
                                enabled: true,
                                allowOverlap: false,
                                useHTML: true,
                                format: '<div style="margin-left: 10px">{point.name}<br />  Risk score: {point.riskScore}</div>',
                                style: {
                                    fontWeight: 'bold',
                                    fontSize: '16px',
                                    textOutline:'0px'
                                }
                            },
                            cursor: 'pointer',
                            point: {
                                events: {
                                    click: function(){
                                        gadgets.Prefs().set("projectName", this.name);
                                        redrawToDrilldown();
                                    }
                                }
                            }
                        }
                    },
                    series: [{
                        type: 'treemap',
                        layoutAlgorithm: 'squarified',
                        data: seriesData

                    }],
                    navigation: {
                        buttonOptions: {
                            align: 'left',
                              menuItems: [
                                'back to heatmap view',
                                'downloadPNG',
                                'downloadJPEG',
                                'downloadPDF',
                                'downloadSVG'
                              ]
                        }
                    },
                    xAxis: {
                        scrollbar: {
                            enabled: true
                        }
                    },
                    yAxis: {
                        scrollbar: {
                            enabled: true
                        }
                    },
                    title: {
                        text: 'Projects Status Heatmap'
                    }
                }
                var charts = Highcharts.chart('container', treemapOptions);
                var calculatedValuer = calculateFontSize() + 'px';
                var maxAxisValue = charts.yAxis[0].max;
                var calculatedValuer = calculateFontSize() + 'px';
                charts.update({
                     plotOptions: {
                             series: {
                                dataLabels: {
                                style: {
                                    fontWeight: 'bold',
                                    fontSize: calculatedValuer,
                                    textOutline:'0px'
                                }
                                }
                             }
                     }
                });
                charts.redraw();
                gadgets.window.adjustHeight();
            }


            function redrawChartToDrilldown(data) {
                var chart = AJS.$("#container").highcharts();
                if(charts !=  null){
                    chart.destroy();
                }
                var seriesData = [];
                var xAxisCategories = [];
                var seriesData = [];
                var projectName = data.projectName;
                AJS.$('#dateConfig').show();
                AJS.$('#issuesDescriptionTable').hide();
                var today = new Date();
                today.setHours(0,0,0,0);
                data.projectInfoByDates.forEach(function(projectInfo){
                    seriesData.push({
                        critical: projectInfo.critical,
                        blocker: projectInfo.blocker,
                        major: projectInfo.major,
                        y: projectInfo.riskScore
                    });
                    var dateOfRiskScore = projectInfo.dateOfRiskScore;
                    var formatDateOfCalc = dateOfRiskScore.monthValue + '/' + dateOfRiskScore.dayOfMonth + '/' + dateOfRiskScore.year;
                    xAxisCategories.push(formatDateOfCalc);
                    var dateOfCalculation = new Date(formatDateOfCalc);
                    dateOfCalculation.setHours(0,0,0,0);
                    if( today.getTime() === dateOfCalculation.getTime()){
                        issuesDescription = projectInfo.issues;
                    }
                });
                var gadget = AJS.$(this)[0].gadgets.Prefs();
                var amberLine = parseInt(gadget.getString("amber"));
                var redLine = parseInt(gadget.getString("red"));
                var lineChart =  {
                    chart: {
                        type: 'line'
                    },
                    credits: {
                        enabled: false
                    },
                    title: {
                        text: 'Risk score for date range for ' + projectName + ' project'
                    },
                    xAxis: {
                        title: {
                            text: 'Date'
                        },
                        categories: xAxisCategories,

                    },
                    yAxis: {
                        title: {
                            text: 'Risk score'
                        },
                        min: 0,
                        tickAmount: 0
                    },
                    legend: {
                        enabled: false
                    },
                    tooltip: {
                        useHTML: true,
                        pointFormat: 'Risk Score: {point.y}<br/>Blocker: {point.blocker}<br/>Critical: {point.critical}<br/>Major: {point.major}'
                    },
                    plotOptions: {
                        series: {
                            connectNulls: true
                        },
                        line: {
                            dataLabels: {
                                enabled: true,
                                color: '#FFFFFF'
                            },
                            enableMouseTracking: true
                        }
                    },
                    series: [{
                        name: ' ',
                        data: seriesData,
                        color: '#FFFFFF'
                    }],
                    navigation: {
                        buttonOptions: {
                            align: 'left'
                        }
                    },
                    exporting: {
                        menuItemDefinitions: {
                            backToTreeMap: {
                                onclick: function(){redrawToTreeMap();},
                                text: 'Back to heatmap'
                            }
                        },
                        buttons:{
                            contextButton: {
                                menuItems: [
                                   'backToTreeMap',
                                   'printChart',
                                   'separator',
                                   'downloadPNG',
                                   'downloadJPEG',
                                   'downloadPDF',
                                   'downloadSVG'
                                ]
                            }
                        }
                    }
                };
                var charts = Highcharts.chart('container', lineChart);
                var calculatedValuer = calculateFontSize() + 'px';
                var maxAxisValue = charts.yAxis[0].max;
                 charts.update({
                    line: {
                        dataLabels: {
                            enabled: true
                        },
                        enableMouseTracking: false
                    },
                    plotOptions: {
                        series: {
                            dataLabels: {
                                style: {
                                    fontWeight: 'bold',
                                    fontSize: calculatedValuer,
                                    textOutline:'0px'
                                }
                            }
                        }
                    },
                    yAxis: {
                        plotBands: [{
                            from: 0,
                            to: amberLine,
                            color: '#baffc9'
                        },{
                            from: amberLine,
                            to: redLine,
                            color: '#ffdfba'
                        },{
                            from: redLine,
                            to: maxAxisValue,
                            color: '#ffb3ba',
                        }]
                    }
                });
                charts.redraw();
                gadgets.window.adjustHeight();
            }

            AJS.$(document).ready((function() {
                (function ($) {
                var gadget = AJS.Gadget({
                baseUrl: "__ATLASSIAN_BASE_URL__",
                useOauth: "/rest/gadget/1.0/currentUser",
                config: {
                    descriptor: function(args) {
                        var gadget = this;
                        var allProjects = args.allProjects;
                        var types = args.issueTypes
                        issueTypes = [];
                        debugger;
                        types.forEach(function(issueType){
                            issueTypes.push({
                                label: issueType.name,
                                value: issueType.name
                            })
                        });
                        AJS.$(this).resize(function() {
                            gadgets.window.adjustHeight();
                        });
                        return {
                            theme : function() {

                                //set where settings will be
                            if (gadgets.window.getViewportDimensions().width < 450){
                                return "gdt top-label";
                            } else {
                                return "gdt top-label";
                            }
                            }(),
                            onResizeReload: false,
                                //set settings to be return(create fields on config page)
                            fields: [
                            {
                                type: "custom",
                                template: function(){
                                    return "<div id='issues-filter' class='issues-filter'><strong class='titleText'>Issues filter settings</strong></div>";
                                }
                            },{
                                id: "projects",
                                userpref: "projects",
                                class: "numField",
                                label: "Projects(comma separated list, ex. 'FACTIVA,DMI'):",
                                type: "callbackBuilder",
                                callback: function(parentDiv){
                                AJS.$('div:has(#projects)').addClass('flex-box');
                                AJS.$('.aui.gdt.top-label').addClass('flex-parent');
                                AJS.$('div:has(#issues-filter)').addClass('flex-row');
                                   parentDiv.append(
                                        AJS.$("<input/>").attr({
                                            id: "projects",
                                            type: "text",
                                            class: "text",
                                            name:"projects"
                                        }).val(gadget.getPref("projects"))
                                    );
                                }
                            }, {
                                id: "labels",
                                userpref: "labels",
                                class: "numField",
                                label: "Labels(comma separated list, ex. 'sec-issue,security'):",
                                type: "callbackBuilder",
                                callback: function(parentDiv){

                                    AJS.$('div:has(#labels)').addClass('flex-box');
                                    parentDiv.append(
                                        AJS.$("<input/>").attr({
                                            id: "labels",
                                            type: "text",
                                            class: "text",
                                            name:"labels"
                                        }).val(gadget.getPref("labels"))
                                    );
                                }
                            }, {
                                type: "custom",
                                template: function(){
                                    return "<div id='sla' class='sla'><strong class='titleText'>Triage SLA Settings</strong></div>";
                                }
                            },{
                                id: "highestPriorityName",
                                userpref: "highestPriorityName",
                                class: "numField",
                                label: "Highest priority name:",
                                type: "callbackBuilder",
                                callback: function(parentDiv){
                                    AJS.$('div:has(#sla)').addClass('flex-row');
                                    AJS.$('div:has(#highestPriorityName)').addClass('flex-box');
                                    parentDiv.append(
                                        AJS.$("<input/>").attr({
                                            id: "highestPriorityName",
                                            type: "text",
                                            class: "text",
                                            name:"highestPriorityName"
                                        }).val(gadget.getPref("highestPriorityName"))
                                    );
                                }
                            }, {
                                id: "blocker",
                                userpref: "blocker",
                                class: "numField",
                                label: "Highest expected triage time, h(ex. 24):",
                                type: "callbackBuilder",
                                callback: function(parentDiv){
                                    AJS.$('div:has(#blocker)').addClass('flex-box');
                                    parentDiv.append(
                                        AJS.$("<input/>").attr({
                                            id: "blocker",
                                            type: "text",
                                            class: "text numeric",
                                            name:"blocker"
                                        }).val(gadget.getPref("blocker"))
                                    );
                                }
                            },{
                                id: "highPriorityName",
                                userpref: "highPriorityName",
                                class: "highPriorityName",
                                label: "High priority name:",
                                type: "callbackBuilder",
                                callback: function(parentDiv){
                                    AJS.$('div:has(#highPriorityName)').addClass('flex-box');
                                    parentDiv.append(
                                        AJS.$("<input/>").attr({
                                            id: "highPriorityName",
                                            type: "text",
                                            class: "text",
                                            name:"highPriorityName"
                                        }).val(gadget.getPref("highPriorityName"))
                                    );
                                }
                            },{
                                id: "critical",
                                userpref: "critical",
                                class: "numField",
                                label: "High expected triage time, h(ex. 48):",
                                type: "callbackBuilder",
                                callback: function(parentDiv){
                                    AJS.$('div:has(#critical)').addClass('flex-box');
                                    parentDiv.append(
                                        AJS.$("<input/>").attr({
                                            id: "critical",
                                            type: "text",
                                            class: "text numeric",
                                            name:"critical"
                                        }).val(gadget.getPref("critical"))
                                    );
                                }
                            },{
                                id: "majorPriorityName",
                                userpref: "majorPriorityName",
                                class: "majorPriorityName",
                                label: "Major priority name:",
                                type: "callbackBuilder",
                                callback: function(parentDiv){
                                    AJS.$('div:has(#majorPriorityName)').addClass('flex-box');
                                    parentDiv.append(
                                        AJS.$("<input/>").attr({
                                            id: "majorPriorityName",
                                            type: "text",
                                            class: "text",
                                            name:"majorPriorityName"
                                        }).val(gadget.getPref("majorPriorityName"))
                                    );
                                }
                            },{
                                id: "major",
                                userpref: "major",
                                class: "numField",
                                label: "Major expected triage time, h(ex. 96):",
                                 type: "callbackBuilder",
                                callback: function(parentDiv){
                                    AJS.$('div:has(#major)').addClass('flex-box');
                                    parentDiv.append(
                                        AJS.$("<input/>").attr({
                                            id: "major",
                                            type: "text",
                                            class: "text numeric",
                                            name:"major"
                                        }).val(gadget.getPref("major"))
                                    );
                                }
                            },{
                                type: "custom",
                                template: function(){
                                    return "<div id='thresholds-settings' class='thresholds-settings'><strong class='titleText'>Heatmap Thresholds Settings</strong></div><div id='specialFlexBox' class='specialFlexBox'>";
                                }
                            }, {
                                id: "red",
                                userpref: "red",
                                class: "numField",
                                label: "Health status 'Red' score value:",
                                type: "callbackBuilder",
                                callback: function(parentDiv){
                                    AJS.$('div:has(#red)').addClass('flex-box');
                                    parentDiv.append(
                                        AJS.$("<input/>").attr({
                                            id: "red",
                                            type: "text",
                                            class: "text numeric",
                                            name:"red"
                                        }).val(gadget.getPref("red"))
                                    );
                                }
                            },{
                                id: "amber",
                                userpref: "amber",
                                class: "numField",
                                label: "Health status 'Amber' score value:",
                                type: "callbackBuilder",
                                callback: function(parentDiv){
                                    AJS.$('div:has(#amber)').addClass('flex-box');
                                    parentDiv.append(
                                        AJS.$("<input/>").attr({
                                            id: "amber",
                                            type: "text",
                                            class: "text numeric",
                                            name:"amber"
                                        }).val(gadget.getPref("amber"))
                                    );
                                }
                            }, {
                                type: "custom",
                                template: function(){
                                    return "</div></div><div id='risk-def' class='risk-def'>Risc Score is a wighted value of SLA violation level on a particular project calculated by formula:<br/><br/>Risk Score = (Blockers * 10) + (Criticals * 1) + (Majors / 20) + (sum of SLA violations)<br/><br/>Note: Only issues with SLA violations are counted in Blockers, Criticals and Majors</div>";
                                }
                            },{
                                type: "custom",
                                template: function(){
                                    return "<div id='advanced-settings' class='advanced-settings'><strong class='titleText'>Advanced settings</strong></div>";
                                }
                            },{
                                id: "cellsNumber",
                                userpref: "cellsNumber",
                                class: "numField",
                                label: "Cells per heatmap:",
                                type: "callbackBuilder",
                                callback: function(parentDiv){

                                    AJS.$('div:has(#cellsNumber)').addClass('flex-box');
                                    AJS.$('div:has(select)').addClass('flex-box');
                                    AJS.$('div:has(#advanced-settings)').addClass('flex-row');
                                    parentDiv.append(
                                        AJS.$("<input id='cellsNumber' type='text' class='text numeric' name='cellsNumber'></input>").val(gadget.getPref("cellsNumber"))
                                    );
                                }
                            },{
                                id: "issueType-field",
                                class: "issueType-select-list",
                                userpref: "issueType",
                                label: "Issue type:",
                                type: "select",
                                selected: gadget.getPref("issueType"),
                                options: issueTypes
                             },
                             AJS.gadget.fields.nowConfigured()
                            ]
                        };
                    },
                    args:[{
                        key: "issueTypes",
                        ajaxOptions: function(){
                            return {
                                url: "/rest/api/2/issuetype",
                                contentType: "application/json"
                            }
                        }
                    }]
                },
                <!--end of config-->
                view: {
                    enableReload: true,
                    onResizeReload: true,
                    template: function(args) {
                    var gadget = this;
                    AJS.$('.item-link.no_target:contains("gadget.common.configure")').text('Configuration');
                    AJS.$('.item-link.no_target:contains("gadget.common.reload")').text('Reload');
                    var now = new Date();
                    var formatedDate = now.getFullYear() + "-" + (now.getMonth()+1) + '-' + now.getDate();
                    gadget.getView().html("<div id='container'/><div id='dateConfig'><div class='flex-box'><label for='fromDate'>Show statistic from: </label><input class='aui-date-picker' id='fromDate' type='date'/></div><div id='showTable' class='flex-box'><input type='button' class='aui-button' value='Show description' id='showDescription'/></div></div><table id='issuesDescriptionTable' align='center'></table>");
                    AJS.$('#fromDate').datePicker({'overrideBrowserDefault': true});
                    AJS.$('#fromDate').attr("max", formatedDate);
                    var defaultDate = new Date()
                    defaultDate.setDate(now.getDate()-7);
                    var day = defaultDate.getDate();
                    var month = (defaultDate.getMonth()+1);
                    if(day<10){
                        day='0'+day;
                    }
                    if(month<10){
                        month='0'+month;
                    }
                    var formatedDefaultDate = defaultDate.getFullYear() + "-" + month + '-' + day;
                    gadgets.Prefs().set('startDate', formatedDefaultDate);
                    var records =  args.records;
                    if(records.length===1){
                         gadgets.Prefs().set("projectName", records[0].projectName);
                         redrawToDrilldown();
                    } else{
                        redrawChartToTreemap(args.records);
                    }
                },
                <!--close templates-->
                args:[{
                    key: "records",
                    ajaxOptions: function() {
                        return {
                            url: "/rest/heatmap-dj/1.0/gadget/heatmap/main-chart",
                            data: {
                                projects: gadgets.Prefs().getString("projects"),
                                labels: gadgets.Prefs().getString("labels"),
                                majorPriorityName: gadgets.Prefs().getString("majorPriorityName"),
                                cellsNumber: gadgets.Prefs().getString("cellsNumber"),
                                highPriorityName: gadgets.Prefs().getString("highPriorityName"),
                                highestPriorityName: gadgets.Prefs().getString("highestPriorityName"),
                                blocker: gadgets.Prefs().getString("blocker"),
                                critical: gadgets.Prefs().getString("critical"),
                                major: gadgets.Prefs().getString("major"),
                                red: gadgets.Prefs().getString("red"),
                                amber: gadgets.Prefs().getString("amber"),
                                issueType: gadgets.Prefs().getString("issueType")
                            }
                        };
                    }
                }]
                }
                <!--end of view-->
            });
            <!--end of AJS.Gadget-->
        })(jQuery);
        <!--end of function-->
    }));
    <!--end of function in doc.ready-->
            </script>
        ]]>
    </Content>

</Module>